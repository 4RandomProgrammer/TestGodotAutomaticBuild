name: 🛠️ Godot Engine Builds
on:
  workflow_dispatch:
    inputs:
      make-release:
        description: 'Make release'
        required: false
        type: boolean
        default: true
  push:
    branches:
      - main

# Global Settings
# SCONS_CACHE for windows must be set in the build environment
env:
  # Only used for the cache key. Increment version to force clean build.
  GODOT_BASE_BRANCH: 3.x
  GODOT_MONO_BUILD_TAG: release-0f99f4b # mono-6.12.0.182
  GODOT_MONO_BUILD_REPO: fractural/godot-mono-builds
  # Linux builds require an older release of mono for some reason
  # GODOT_MONO_LINUX_BUILD_TAG: release-aa9e050 # mono-6.12.0.144
  # GODOT_MONO_LINUX_BUILD_REPO: godotengine/godot-mono-builds
  GODOT_BASE_VERSION: 3.5
  GODOT_BASE_VERSION_STATUS: stable
  GODOT_VERSION_STATUS: custom

jobs:
  ios:
    runs-on: "macos-latest"
    name: 🍏 iOS ${{ matrix.name }}
    env:
      SCONSFLAGS: verbose=yes warnings=all
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Template (target=release;debug, tools=no)
            cache-name: ios-template
            sconsflags: debug_symbols=no
            tools: false
            build-mono: false
            artifact: true

          - name: Template w/ Mono (target=release;debug, tools=no)
            cache-name: ios-template-mono
            sconsflags: mono_static=yes debug_symbols=no
            tools: false
            build-mono: true
            artifact: true

    steps:
      - uses: actions/checkout@v3

      - name: Download Godot
        uses: ./.github/actions/godot-download
        with:
          version: ${{ env.GODOT_BASE_VERSION }}-${{ env.GODOT_BASE_VERSION_STATUS }}

      - name: Setup Godot build cache
        uses: ./.github/actions/godot-cache
        continue-on-error: true

      - name: Setup python and scons
        uses: ./.github/actions/godot-deps

      # --------------------------------------------- MONO START --------------------------------------------- #
      - name: Setup mono (arm64)
        if: ${{ matrix.build-mono }}
        uses: ./.github/actions/godot-mono
        with:
          mono-bcl: "bcl-ios"
          mono-release: "ios-arm64"

      - name: Setup mono (x86_64)
        if: ${{ matrix.build-mono }}
        uses: ./.github/actions/godot-mono
        with:
          mono-release: "ios-x86_64"
      
      - name: Mono precompilation
        if: ${{ matrix.build-mono }}
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} ${{ matrix.sconsflags }} module_mono_enabled=yes mono_glue=no
          platform: osx
          tools: true

      # Generate mono glue
      - name: Generate Mono glue code
        if: ${{ matrix.build-mono }}
        run: |
          DRI_PRIME=0 "./bin/godot.osx.tools.64.mono" --generate-mono-glue modules/mono/glue

      - name: Set Mono scons flags
        if: ${{ matrix.build-mono }}
        run: |
          echo "MONO_SCONSFLAGS=module_mono_enabled=yes mono_glue=yes copy_mono_root=yes mono_bcl=$HOME/mono-bcls/monotouch" >> $GITHUB_ENV
      # --------------------------------------------- MONO END ----------------------------------------------- #
      
      - name: Compilation (arch=arm64, target=release)
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} ${{ env.MONO_SCONSFLAGS }} ${{ matrix.sconsflags }} arch=arm64 ${{ matrix.build-mono && 'mono_prefix=$HOME/mono-installs/ios-arm64-release' || '' }}
          platform: iphone
          target: release
          tools: false
      
      - name: Compilation (arch=x86_64, ios_simulator=yes, target=release)
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} ${{ env.MONO_SCONSFLAGS }} ${{ matrix.sconsflags }} arch=x86_64 ios_simulator=yes ${{ matrix.build-mono && 'mono_prefix=$HOME/mono-installs/ios-x86_64-release' || '' }}
          platform: iphone
          target: release
          tools: false
      
            - name: Compilation (arch=arm64, target=debug)
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} ${{ env.MONO_SCONSFLAGS }} ${{ matrix.sconsflags }} arch=arm64 ${{ matrix.build-mono && 'mono_prefix=$HOME/mono-installs/ios-arm64-release' || '' }}
          platform: iphone
          target: debug
          tools: false
      
      - name: Compilation (arch=x86_64, ios_simulator=yes, target=debug)
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} ${{ env.MONO_SCONSFLAGS }} ${{ matrix.sconsflags }} arch=x86_64 ios_simulator=yes ${{ matrix.build-mono && 'mono_prefix=$HOME/mono-installs/ios-x86_64-release' || '' }}
          platform: iphone
          target: debug
          tools: false

      - name: Bundle builds
        shell: bash
        run: |
          echo $(basename bin/*)

          cp bin/libgodot.iphone.opt.arm64.a $HOME/out/templates/libgodot.iphone.a
          cp bin/libgodot.iphone.opt.debug.arm64.a $HOME/out/templates/libgodot.iphone.debug.a

          cp bin/libgodot.iphone.opt.x86_64.simulator.a $HOME/out/templates/libgodot.iphone.simulator.a
          cp bin/libgodot.iphone.opt.debug.x86_64.simulator.a $HOME/out/templates/libgodot.iphone.debug.simulator.a

          if ${{ matrix.build-mono }}; then
            cp -r misc/dist/iphone-mono-libs $HOME/out/templates/iphone-mono-libs

            cp bin/libmonosgen-2.0.iphone.arm64.a $HOME/out/templates/iphone-mono-libs/libmonosgen-2.0.xcframework/ios-arm64/libmonosgen.a
            cp bin/libmono-native.iphone.arm64.a $HOME/out/templates/iphone-mono-libs/libmono-native.xcframework/ios-arm64/libmono-native.a
            cp bin/libmono-profiler-log.iphone.arm64.a $HOME/out/templates/iphone-mono-libs/libmono-profiler-log.xcframework/ios-arm64/libmono-profiler-log.a

            simulator.a -output $HOME/out/templates/iphone-mono-libs/libmono-profiler-log.xcframework/ios-arm64_x86_64-simulator/libmono-profiler-log.a
            cp bin/libmonosgen-2.0.iphone.x86_64.simulator.a $HOME/out/templates/iphone-mono-libs/libmonosgen-2.0.xcframework/ios-arm64_x86_64-simulator/libmonosgen.a
            cp bin/libmono-native.iphone.x86_64.simulator.a $HOME/out/templates/iphone-mono-libs/libmono-native.xcframework/ios-arm64_x86_64-simulator/libmono-native.a
            cp bin/libmono-profiler-log.iphone.x86_64.simulator.a $HOME/out/templates/iphone-mono-libs/libmono-profiler-log.xcframework/ios-arm64_x86_64-simulator/libmono-profiler-log.a

            # The Mono libraries for the interpreter are not available for simulator builds
            cp bin/libmono-ee-interp.iphone.arm64.a $HOME/out/templates/iphone-mono-libs/libmono-ee-interp.xcframework/ios-arm64/libmono-ee-interp.a
            cp bin/libmono-icall-table.iphone.arm64.a $HOME/out/templates/iphone-mono-libs/libmono-icall-table.xcframework/ios-arm64/libmono-icall-table.a
            cp bin/libmono-ilgen.iphone.arm64.a $HOME/out/templates/iphone-mono-libs/libmono-ilgen.xcframework/ios-arm64/libmono-ilgen.a

            mkdir -p $HOME/out/templates/bcl
            cp -r $HOME/mono-installs/ios-bcl/* $HOME/out/templates/bcl
          fi

      - name: Upload artifact
        uses: ./.github/actions/upload-artifact
        with:
          path: $HOME/out/templates
          name: ${{ matrix.cache-name }}
  
  android:
    runs-on: "ubuntu-20.04"
    name: 🤖 Android ${{ matrix.name }}
    env:
      SCONSFLAGS: verbose=yes warnings=all
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Template (target=release, tools=no)
            cache-name: android-template
            sconsflags: debug_symbols=no
            tools: false
            build-mono: false
            artifact: true

          - name: Template w/ Mono (target=release, tools=no)
            cache-name: android-template-mono
            sconsflags: debug_symbols=no
            tools: false
            build-mono: true
            artifact: true

    steps:
      - uses: actions/checkout@v3

      - name: Download Godot
        uses: ./.github/actions/godot-download
        with:
          version: ${{ env.GODOT_BASE_VERSION }}-${{ env.GODOT_BASE_VERSION_STATUS }}

      - name: Linux dependencies
        shell: bash
        run: |
          # Azure repositories are not reliable, we need to prevent azure giving us packages.
          sudo rm -f /etc/apt/sources.list.d/*
          sudo cp -f misc/ci/sources.list /etc/apt/sources.list
          sudo apt-get update
          # The actual dependencies
          sudo apt-get install build-essential pkg-config libx11-dev libxcursor-dev \
              libxinerama-dev libgl1-mesa-dev libglu-dev libasound2-dev libpulse-dev \
              libdbus-1-dev libudev-dev libxi-dev libxrandr-dev yasm xvfb unzip \
              libspeechd-dev speech-dispatcher

      # Azure repositories are not reliable, we need to prevent azure giving us packages.
      - name: Make apt sources.list use the default Ubuntu repositories
        run: |
          sudo rm -f /etc/apt/sources.list.d/*
          sudo cp -f misc/ci/sources.list /etc/apt/sources.list
          sudo apt-get update

      - name: Set up Java 11
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 11

      - name: Setup Godot build cache
        uses: ./.github/actions/godot-cache
        continue-on-error: true

      - name: Setup python and scons
        uses: ./.github/actions/godot-deps

      # --------------------------------------------- MONO START --------------------------------------------- #
      - name: Setup mono (arm64v8)
        if: ${{ matrix.build-mono }}
        uses: ./.github/actions/godot-mono
        with:
          mono-bcl: "bcl-android"
          mono-release: "android-arm64v8"
      
      - name: Setup mono (armv7)
        if: ${{ matrix.build-mono }}
        uses: ./.github/actions/godot-mono
        with:
          mono-release: "android-armv7"
      
      - name: Setup mono (x86)
        if: ${{ matrix.build-mono }}
        uses: ./.github/actions/godot-mono
        with:
          mono-release: "android-x86"

      - name: Setup mono (x86_64)
        if: ${{ matrix.build-mono }}
        uses: ./.github/actions/godot-mono
        with:
          mono-release: "android-x86_64"
      
      - name: Mono precompilation
        if: ${{ matrix.build-mono }}
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} ${{ matrix.sconsflags }} module_mono_enabled=yes mono_glue=no
          platform: linuxbsd
          tools: true

      # Generate mono glue
      - name: Generate Mono glue code
        if: ${{ matrix.build-mono }}
        run: |
          DRI_PRIME=0 xvfb-run "./bin/godot.x11.tools.64.mono" --generate-mono-glue modules/mono/glue || true

      - name: Set Mono scons flags
        if: ${{ matrix.build-mono }}
        run: |
          echo "MONO_SCONSFLAGS=module_mono_enabled=yes mono_glue=yes copy_mono_root=yes mono_bcl=$HOME/mono-bcls/monodroid" >> $GITHUB_ENV
      # --------------------------------------------- MONO END ----------------------------------------------- #

      - name: Compilation (android_arch=arm64v8)
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} ${{ env.MONO_SCONSFLAGS }} ${{ matrix.sconsflags }} android_arch=arm64v8 ${{ matrix.build-mono && 'mono_prefix=$HOME/mono-installs/android-arm64v8-release' || '' }}
          platform: android
          target: release
          tools: false
      
      - name: Compilation (android_arch=armv7)
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} ${{ env.MONO_SCONSFLAGS }} ${{ matrix.sconsflags }} android_arch=armv7 ${{ matrix.build-mono && 'mono_prefix=$HOME/mono-installs/android-armv7-release' || '' }}
          platform: android
          target: release
          tools: false
      
      - name: Compilation (android_arch=x86)
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} ${{ env.MONO_SCONSFLAGS }} ${{ matrix.sconsflags }} android_arch=x86 ${{ matrix.build-mono && 'mono_prefix=$HOME/mono-installs/android-x86-release' || '' }}
          platform: android
          target: release
          tools: false

      - name: Compilation (android_arch=x86_64)
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} ${{ env.MONO_SCONSFLAGS }} ${{ matrix.sconsflags }} android_arch=x86_64 ${{ matrix.build-mono && 'mono_prefix=$HOME/mono-installs/android-x86_64-release' || '' }}
          platform: android
          target: release
          tools: false

      - name: Generate Godot templates
        run: |
          cd platform/android/java
          ./gradlew generateGodotTemplates
          cd ../../..
          ls -l bin/

      - name: Upload artifact
        uses: ./.github/actions/upload-artifact
        with:
          name: ${{ matrix.cache-name }}
  
  javascript:
    runs-on: "ubuntu-20.04"
    name: 🌐 JavaScript ${{ matrix.name }}
    env:
      SCONSFLAGS: verbose=yes warnings=all
      EM_VERSION: 1.39.9
      EM_CACHE_FOLDER: "emsdk-cache"
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Template (target=release, tools=no)
            cache-name: javascript-template
            sconsflags: debug_symbols=no
            tools: false
            build-mono: false
            artifact: true

          - name: Template w/ Mono (target=release, tools=no)
            cache-name: javascript-template-mono
            sconsflags: mono_static=yes debug_symbols=no
            tools: false
            build-mono: true
            artifact: true

    steps:
      - uses: actions/checkout@v3

      - name: Download Godot
        uses: ./.github/actions/godot-download
        with:
          version: ${{ env.GODOT_BASE_VERSION }}-${{ env.GODOT_BASE_VERSION_STATUS }}

      - name: Linux dependencies
        shell: bash
        run: |
          # Azure repositories are not reliable, we need to prevent azure giving us packages.
          sudo rm -f /etc/apt/sources.list.d/*
          sudo cp -f misc/ci/sources.list /etc/apt/sources.list
          sudo apt-get update
          # The actual dependencies
          sudo apt-get install build-essential pkg-config libx11-dev libxcursor-dev \
              libxinerama-dev libgl1-mesa-dev libglu-dev libasound2-dev libpulse-dev \
              libdbus-1-dev libudev-dev libxi-dev libxrandr-dev yasm xvfb unzip \
              libspeechd-dev speech-dispatcher

      - name: Set up Emscripten latest
        uses: mymindstorm/setup-emsdk@v11
        continue-on-error: true
        with:
          version: ${{ env.EM_VERSION }}
          actions-cache-folder: ${{ env.EM_CACHE_FOLDER }}

      - name: Verify Emscripten setup
        run: |
          emcc -v

      - name: Setup Godot build cache
        uses: ./.github/actions/godot-cache
        continue-on-error: true

      - name: Setup python and scons
        uses: ./.github/actions/godot-deps

      # --------------------------------------------- MONO START --------------------------------------------- #
      - name: Setup mono
        if: ${{ matrix.build-mono }}
        uses: ./.github/actions/godot-mono
        with:
          mono-release: "wasm-runtime"
          mono-bcl: "bcl-desktop"

      - name: Mono precompilation
        if: ${{ matrix.build-mono }}
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} ${{ matrix.sconsflags }} module_mono_enabled=yes mono_glue=no
          platform: linuxbsd
          tools: true

      # Generate mono glue
      - name: Generate Mono glue code
        if: ${{ matrix.build-mono }}
        run: |
          DRI_PRIME=0 xvfb-run "./bin/godot.x11.tools.64.mono" --generate-mono-glue modules/mono/glue || true

      - name: Set Mono scons flags
        if: ${{ matrix.build-mono }}
        run: |
          echo "MONO_SCONSFLAGS=module_mono_enabled=yes mono_glue=yes copy_mono_root=yes mono_prefix=$HOME/mono-installs/wasm-runtime-release mono_bcl=$HOME/mono-bcls/wasm" >> $GITHUB_ENV
      # --------------------------------------------- MONO END ----------------------------------------------- #

      - name: Compilation
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} ${{ env.MONO_SCONSFLAGS }} ${{ matrix.sconsflags }}
          platform: javascript
          target: release
          tools: false

      - name: Package Export Template
        if: ${{ !matrix.tools }}
        run: |
          find bin ! -name 'godot.javascript.${{ matrix.target == 'release' && 'opt' || 'debug' }}.${{ matrix.build-mono && 'mono.' || '' }}.zip' -type f -exec rm -f {} +
          mv bin/godot.javascript.${{ matrix.target == 'release' && 'opt' || 'debug' }}.${{ matrix.build-mono && 'mono.' || '' }}.zip bin/webassembly_${{ matrix.target }}.zip
        
      - name: Upload artifact
        uses: ./.github/actions/upload-artifact
        with:
          name: ${{ matrix.cache-name }}
  
  linux:
    runs-on: "ubuntu-20.04"
    name: 🐧 Linux ${{ matrix.name }}
    env:
      SCONSFLAGS: verbose=yes warnings=all
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Editor (target=release_debug, tools=yes)
            cache-name: linux-editor
            target: release_debug
            sconsflags: mono_static=yes debug_symbols=no
            tools: true
            build-mono: false

          - name: Template (target=release, tools=no)
            cache-name: linux-template
            target: release
            sconsflags: mono_static=yes debug_symbols=no
            tools: false
            build-mono: false

          - name: Editor w/ Mono (target=release_debug, tools=yes)
            cache-name: linux-editor-mono
            target: release_debug
            sconsflags: mono_static=yes
            tools: true
            build-mono: true

          - name: Template w/ Mono (target=release, tools=no)
            cache-name: linux-template-mono
            target: release
            sconsflags: mono_static=yes debug_symbols=no
            tools: false
            build-mono: true

    steps:
      - uses: actions/checkout@v3

      - name: Download Godot
        uses: ./.github/actions/godot-download
        with:
          version: ${{ env.GODOT_BASE_VERSION }}-${{ env.GODOT_BASE_VERSION_STATUS }}

      - name: Linux dependencies
        shell: bash
        run: |
          sudo apt-get install xvfb libc6-dev
          
      - name: Setup Linux toolchain (x86_64)
        uses: ./.github/actions/godot-linux-toolchain
        with:
          toolchain-name: "x86_64-godot-linux-gnu_sdk-buildroot"
      
      - name: Setup Linux toolchain (i686)
        uses: ./.github/actions/godot-linux-toolchain
        with:
          toolchain-name: "i686-godot-linux-gnu_sdk-buildroot"
      
      # - name: Setup Linux toolchain (arm)
      #   uses: ./.github/actions/godot-linux-toolchain
      #   with:
      #     toolchain-name: "arm-godot-linux-gnueabihf_sdk-buildroot"

      - name: Setup Godot build cache
        uses: ./.github/actions/godot-cache
        with:
          cache-name: ${{ matrix.cache-name }}
        continue-on-error: true

      - name: Setup python and scons
        uses: ./.github/actions/godot-deps

      # --------------------------------------------- MONO START --------------------------------------------- #
      - name: Setup mono (x86_64)
        if: ${{ matrix.build-mono }}
        uses: ./.github/actions/godot-mono
        with:
          mono-release: "linux-x86_64"
          mono-bcl: "bcl-desktop"
      
      - name: Setup mono (x86)
        if: ${{ matrix.build-mono }}
        uses: ./.github/actions/godot-mono
        with:
          mono-release: "linux-x86"
      
      - name: Mono precompilation
        if: ${{ matrix.build-mono }}
        uses: ./.github/actions/godot-build
        with:
          buildroot: "${{ github.workspace }}/x86_64-godot-linux-gnu_sdk-buildroot/bin"
          sconsflags: ${{ env.SCONSFLAGS }} ${{ matrix.sconsflags }} module_mono_enabled=yes mono_glue=no copy_mono_root=yes mono_bcl=$HOME/mono-bcls/net_4_x mono_prefix=$HOME/mono-installs/desktop-linux-x86_64-release
          platform: linuxbsd
          tools: true

      # Generate mono glue
      - name: Generate Mono glue code
        if: ${{ matrix.build-mono }}
        run: |
          DRI_PRIME=0 xvfb-run "./bin/godot.x11.tools.64.mono" --generate-mono-glue modules/mono/glue || true

      - name: Set Mono scons flags
        if: ${{ matrix.build-mono }}
        run: |
          echo "MONO_SCONSFLAGS=module_mono_enabled=yes mono_glue=yes copy_mono_root=yes mono_bcl=$HOME/mono-bcls/net_4_x" >> $GITHUB_ENV
      # --------------------------------------------- MONO END ----------------------------------------------- #
      
      - name: Compilation (bits=64)
        uses: ./.github/actions/godot-build
        with:
          buildroot: "${{ github.workspace }}/x86_64-godot-linux-gnu_sdk-buildroot/bin"
          sconsflags: ${{ env.SCONSFLAGS }} ${{ env.MONO_SCONSFLAGS }} ${{ matrix.sconsflags }} bits=64 ${{ matrix.build-mono && 'mono_prefix=$HOME/mono-installs/desktop-linux-x86_64-release' || '' }}
          platform: linuxbsd
          target: ${{ matrix.target }}
          tools: ${{ matrix.tools }}

      - name: Compilation (bits=32)
        uses: ./.github/actions/godot-build
        with:
          buildroot: "${{ github.workspace }}/i686-godot-linux-gnu_sdk-buildroot/bin"
          sconsflags: ${{ env.SCONSFLAGS }} ${{ env.MONO_SCONSFLAGS }} ${{ matrix.sconsflags }} bits=32 ${{ matrix.build-mono && 'mono_prefix=$HOME/mono-installs/desktop-linux-x86-release' || '' }}
          platform: linuxbsd
          target: ${{ matrix.target }}
          tools: ${{ matrix.tools }}
      
      # - name: Compilation (armv8)
      #   uses: ./.github/actions/godot-build
      #   with:
      #     buildroot: "${{ github.workspace }}/arm-godot-linux-gnueabihf_sdk-buildroot/bin"
      #     sconsflags: ${{ env.SCONSFLAGS }} ${{ env.MONO_SCONSFLAGS }} ${{ matrix.sconsflags }} CCFLAGS="-mtune=cortex-a72 -mcpu=cortex-a72 -mfloat-abi=hard -mlittle-endian -munaligned-access -mfpu=neon-fp-armv8"

      - name: Prepare artifact
        shell: bash
        run: |
          rm godot.x11.tools.64.mono
          if ${{ matrix.target == 'release' }}; then
            find bin -iname "godot.*" -exec strip "{}" \;
          fi
          find bin -iname "godot.*" -exec chmod +x "{}" \;

      - name: Upload artifact
        uses: ./.github/actions/upload-artifact
        with:
          name: ${{ matrix.cache-name }}
  
  macos:
    runs-on: "macos-latest"
    name: 🍎 macOS ${{ matrix.name }}
    env:
      SCONSFLAGS: verbose=yes warnings=all
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Editor (target=release_debug, tools=yes)
            cache-name: macos-editor
            target: release_debug
            tools: true
            build-mono: false

          - name: Template (target=release, tools=no)
            cache-name: macos-template
            target: release
            sconsflags: debug_symbols=no
            tools: false
            build-mono: false

          - name: Editor w/ Mono (target=release_debug, tools=yes)
            cache-name: macos-editor-mono
            target: release_debug
            sconsflags: mono_static=yes
            tools: true
            build-mono: true

          - name: Template w/ Mono (target=release, tools=no)
            cache-name: macos-template-mono
            target: release
            sconsflags: mono_static=yes debug_symbols=no
            tools: false
            build-mono: true

    steps:
      - uses: actions/checkout@v3

      - name: Download Godot
        uses: ./.github/actions/godot-download
        with:
          version: ${{ env.GODOT_BASE_VERSION }}-${{ env.GODOT_BASE_VERSION_STATUS }}

      - name: Setup Godot build cache
        uses: ./.github/actions/godot-cache
        with:
          cache-name: ${{ matrix.cache-name }}
        continue-on-error: true

      - name: Setup python and scons
        uses: ./.github/actions/godot-deps

      # --------------------------------------------- MONO START --------------------------------------------- #
      - name: Setup mono
        if: ${{ matrix.build-mono }}
        uses: ./.github/actions/godot-mono
        with:
          mono-release: "osx-x86_64"
          mono-bcl: "bcl-desktop"
      
      - if: ${{ matrix.build-mono }}
        uses: ./.github/actions/godot-mono
        with:
          mono-release: "osx-arm64"
      
      - name: Mono precompilation
        if: ${{ matrix.build-mono }}
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} ${{ matrix.sconsflags }} module_mono_enabled=yes mono_glue=no
          platform: osx
          tools: true

      # Generate mono glue
      - name: Generate Mono glue code
        if: ${{ matrix.build-mono }}
        run: |
          DRI_PRIME=0 "./bin/godot.osx.tools.64.mono" --generate-mono-glue modules/mono/glue

      - name: Set Mono scons flags
        if: ${{ matrix.build-mono }}
        run: |
          echo "MONO_SCONSFLAGS=module_mono_enabled=yes mono_glue=yes copy_mono_root=yes mono_bcl=$HOME/mono-bcls/net_4_x" >> $GITHUB_ENV
      # --------------------------------------------- MONO END ----------------------------------------------- #
      
      - name: Compilation (arch=x86_64)
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} ${{ env.MONO_SCONSFLAGS }} ${{ matrix.sconsflags }} arch=x86_64 ${{ matrix.build-mono && 'mono_prefix=$HOME/mono-installs/desktop-osx-x86_64-release' || '' }}
          platform: osx
          target: ${{ matrix.target }}
          tools: ${{ matrix.tools }}

      - name: Compilation (arch=arm64)
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} ${{ env.MONO_SCONSFLAGS }} ${{ matrix.sconsflags }} arch=arm64 ${{ matrix.build-mono && 'mono_prefix=$HOME/mono-installs/desktop-osx-arm64-release' || '' }}
          platform: osx
          target: ${{ matrix.target }}
          tools: ${{ matrix.tools }}

      - name: Package Export Templates (arch=arm64, x86_64)
        if: ${{ !matrix.tools }}
        run: |
          lipo -create bin/godot.osx.opt.x86_64 bin/godot.osx.opt.arm64 -output bin/godot.osx.opt.universal
          cp -r misc/dist/osx_template.app .
          mkdir -p osx_template.app/Contents/MacOS
          cp bin/godot.osx.opt.universal osx_template.app/Contents/MacOS/godot_osx_release.64
          cp bin/godot.osx.opt.debug.universal osx_template.app/Contents/MacOS/godot_osx_debug.64
          chmod +x osx_template.app/Contents/MacOS/godot_osx*
 
          if ${{ matrix.build-mono }}; then
            mv bin/GodotSharp "bin/data.mono.osx.64.${{ matrix.target }}"
            mv bin/godot.server.opt.64.mono "bin/server_64_${{ matrix.target }}"
          else
            mv bin/godot.server.opt.64 "bin/server_64_${{ matrix.target }}"
          fi

      - name: Prepare artifact
        shell: bash
        run: |
          rm godot.x11.tools.64.mono
          if ${{ matrix.target == 'release' }}; then
            find bin -iname "godot.*" -exec strip "{}" \;
          fi
          find bin -iname "godot.*" -exec chmod +x "{}" \;

      - name: Upload artifact
        uses: ./.github/actions/upload-artifact
        with:
          name: ${{ matrix.cache-name }}
  
  server:
    runs-on: "ubuntu-20.04"
    name: ☁ Server ${{ matrix.name }}
    env:
      SCONSFLAGS: verbose=yes warnings=all
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Linux Headless (target=release_debug, tools=yes)
            cache-name: server-editor
            target: release_debug
            sconsflags: mono_static=yes debug_symbols=no
            tools: true
            build-mono: false

          - name: Linux Server Template (target=release, tools=no)
            cache-name: server-template
            target: release
            sconsflags: mono_static=yes debug_symbols=no
            tools: false
            build-mono: false

          # - name: Linux Headless w/ Mono (target=release_debug, tools=yes)
          #   cache-name: server-editor-mono
          #   target: release_debug
          #   sconsflags: mono_static=yes debug_symbols=no
          #   tools: true
          #   build-mono: true

          # - name: Linux Server Template w/ Mono (target=release, tools=no)
          #   cache-name: server-template-mono
          #   target: release
          #   sconsflags: mono_static=yes debug_symbols=no
          #   tools: false
          #   build-mono: true

    steps:
      - uses: actions/checkout@v3

      - name: Download Godot
        uses: ./.github/actions/godot-download
        with:
          version: ${{ env.GODOT_BASE_VERSION }}-${{ env.GODOT_BASE_VERSION_STATUS }}

      - name: Linux dependencies
        shell: bash
        run: |
          sudo apt-get install xvfb libc6-dev
          
      - name: Setup Linux toolchain (x86_64)
        if: ${{ matrix.build-mono }}
        uses: ./.github/actions/godot-linux-toolchain
        with:
          toolchain-name: "x86_64-godot-linux-gnu_sdk-buildroot"
      
      - name: Setup Linux toolchain (i686)
        if: ${{ matrix.build-mono }}
        uses: ./.github/actions/godot-linux-toolchain
        with:
          toolchain-name: "i686-godot-linux-gnu_sdk-buildroot"
      
      - name: Setup Linux toolchain (arm)
        if: ${{ matrix.build-mono }}
        uses: ./.github/actions/godot-linux-toolchain
        with:
          toolchain-name: "arm-godot-linux-gnueabihf_sdk-buildroot"

      - name: Setup Godot build cache
        uses: ./.github/actions/godot-cache
        with:
          cache-name: ${{ matrix.cache-name }}
        continue-on-error: true

      - name: Setup python and scons
        uses: ./.github/actions/godot-deps

      # --------------------------------------------- MONO START --------------------------------------------- #
      - name: Setup mono (x86_64)
        if: ${{ matrix.build-mono }}
        uses: ./.github/actions/godot-mono
        with:
          mono-release: "linux-x86_64"
          mono-bcl: "bcl-desktop"
      
      - name: Setup mono (x86)
        if: ${{ matrix.build-mono }}
        uses: ./.github/actions/godot-mono
        with:
          mono-release: "linux-x86"
        
      - name: Mono precompilation
        if: ${{ matrix.build-mono }}
        uses: ./.github/actions/godot-build
        with:
          buildroot: "${{ github.workspace }}/x86_64-godot-linux-gnu_sdk-buildroot/bin"
          sconsflags: ${{ env.SCONSFLAGS }} ${{ matrix.sconsflags }} module_mono_enabled=yes mono_glue=no mono_prefix=$HOME/mono-installs/desktop-linux-x86_64-release
          platform: linuxbsd
          tools: true

      # Generate mono glue
      - name: Generate Mono glue code
        if: ${{ matrix.build-mono }}
        run: |
          DRI_PRIME=0 xvfb-run "./bin/godot.x11.tools.64.mono" --generate-mono-glue modules/mono/glue || true

      - name: Set Mono scons flags
        if: ${{ matrix.build-mono }}
        run: |
          echo "MONO_SCONSFLAGS=module_mono_enabled=yes mono_glue=yes copy_mono_root=yes mono_bcl=$HOME/mono-bcls/net_4_x" >> $GITHUB_ENV
      # --------------------------------------------- MONO END ----------------------------------------------- #
      
      - name: Compilation (bits=64)
        uses: ./.github/actions/godot-build
        with:
          buildroot: "${{ github.workspace }}/x86_64-godot-linux-gnu_sdk-buildroot/bin"
          sconsflags: ${{ env.SCONSFLAGS }} ${{ env.MONO_SCONSFLAGS }} ${{ matrix.sconsflags }} bits=64 ${{ matrix.build-mono && 'mono_prefix=$HOME/mono-installs/desktop-linux-x86_64-release' || '' }}
          platform: server
          target: ${{ matrix.target }}
          tools: ${{ matrix.tools }}

      - name: Package Export Template (bits=64)
        if: ${{ !matrix.tools }}
        run: | 
          if ${{ matrix.build-mono }}; then
            mv bin/GodotSharp "bin/data.mono.server.64.${{ matrix.target }}"
            mv bin/godot.server.opt.64.mono "bin/server_64_${{ matrix.target }}"
          else
            mv bin/godot.server.opt.64 "bin/server_64_${{ matrix.target }}"
          fi

      - name: Compilation (bits=32)
        uses: ./.github/actions/godot-build
        with:
          buildroot: "${{ github.workspace }}/i686-godot-linux-gnu_sdk-buildroot/bin"
          sconsflags: ${{ env.SCONSFLAGS }} ${{ env.MONO_SCONSFLAGS }} ${{ matrix.sconsflags }} bits=32 ${{ matrix.build-mono && 'mono_prefix=$HOME/mono-installs/desktop-linux-x86-release' || '' }}
          platform: server
          target: ${{ matrix.target }}
          tools: ${{ matrix.tools }}

      - name: Package Export Template (bits=32)
        if: ${{ !matrix.tools }}
        run: | 
          if ${{ matrix.build-mono }}; then
            mv bin/GodotSharp "bin/data.mono.server.32.${{ matrix.target }}"
            mv bin/godot.server.opt.32.mono "bin/server_32_${{ matrix.target }}"
          else
            mv bin/godot.server.opt.32 "bin/server_32_${{ matrix.target }}"
          fi
        
      - name: Prepare artifact
        shell: bash
        run: |
          rm godot.x11.tools.64.mono
          if ${{ matrix.target == 'release' }}; then
            find bin -iname "godot.*" -exec strip "{}" \;
          fi
          find bin -iname "godot.*" -exec chmod +x "{}" \;

      - name: Upload artifact
        uses: ./.github/actions/upload-artifact
        with:
          name: ${{ matrix.cache-name }}
  
  windows:
    runs-on: "ubuntu-20.04"
    name: 🏁 Windows ${{ matrix.name }}
    env:
      SCONSFLAGS: verbose=yes warnings=all use_mingw=yes
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Editor (target=release_debug, tools=yes)
            cache-name: windows-editor
            target: release_debug
            tools: true
            build-mono: false

          - name: Template (target=release, tools=no)
            cache-name: windows-template
            target: release
            sconsflags: debug_symbols=no
            tools: false
            build-mono: false

          - name: Editor w/ Mono (target=release_debug, tools=yes)
            cache-name: windows-editor-mono
            sconsflags: mono_static=yes
            target: release_debug
            tools: true
            build-mono: true

          - name: Template w/ Mono (target=release, tools=no)
            cache-name: windows-template-mono
            target: release
            sconsflags: mono_static=yes debug_symbols=no
            tools: false
            build-mono: true

    steps:
      - uses: actions/checkout@v3

      - name: Download Godot
        uses: ./.github/actions/godot-download
        with:
          version: ${{ env.GODOT_BASE_VERSION }}-${{ env.GODOT_BASE_VERSION_STATUS }}

      - name: Linux dependencies
        shell: bash
        run: |
          # Azure repositories are not reliable, we need to prevent azure giving us packages.
          sudo rm -f /etc/apt/sources.list.d/*
          sudo cp -f misc/ci/sources.list /etc/apt/sources.list
          sudo apt-get update
          # The actual dependencies
          sudo apt-get install build-essential pkg-config libx11-dev libxcursor-dev \
              libxinerama-dev libgl1-mesa-dev libglu-dev libasound2-dev libpulse-dev \
              libdbus-1-dev libudev-dev libxi-dev libxrandr-dev yasm xvfb unzip \
              libspeechd-dev speech-dispatcher libgl1-mesa-glx
      
      - name: Windows dependencies
        shell: bash
        run: |
          sudo apt-get install mingw-w64
          echo "1" | sudo update-alternatives --config x86_64-w64-mingw32-gcc
          echo "1" | sudo update-alternatives --config x86_64-w64-mingw32-g++
          echo "1" | sudo update-alternatives --config i686-w64-mingw32-gcc
          echo "1" | sudo update-alternatives --config i686-w64-mingw32-g++

      - name: Setup Godot build cache
        uses: ./.github/actions/godot-cache
        with:
          cache-name: ${{ matrix.cache-name }}
        continue-on-error: true

      - name: Setup python and scons
        uses: ./.github/actions/godot-deps

      # --------------------------------------------- MONO START --------------------------------------------- #
      # Assume mono is already installed on the runner
      - name: Setup mono (x86_64)
        if: ${{ matrix.build-mono }}
        uses: ./.github/actions/godot-mono
        with:
          mono-bcl: "bcl-desktop"
          mono-release: "windows-x86_64"
      
      - name: Setup mono (x86)
        if: ${{ matrix.build-mono }}
        uses: ./.github/actions/godot-mono
        with:
          mono-bcl: "bcl-desktop-win32"
          mono-release: "windows-x86"
      
      - name: Setup mono (linux-x86_64)
        if: ${{ matrix.build-mono }}
        uses: ./.github/actions/godot-mono
        with:
          mono-release: "linux-x86_64"

      - name: Mono precompilation
        if: ${{ matrix.build-mono }}
        uses: ./.github/actions/godot-build
        with:
          sconsflags: mono_static=yes module_mono_enabled=yes mono_glue=no
          platform: linuxbsd
          tools: true

      # Generate mono glue
      - name: Generate Mono glue code
        if: ${{ matrix.build-mono }}
        run: |
          DRI_PRIME=0 xvfb-run "./bin/godot.x11.tools.64.mono" --generate-mono-glue modules/mono/glue || true
      
      - name: Set Mono scons flags
        if: ${{ matrix.build-mono }}
        run: |
          echo "MONO_SCONSFLAGS=module_mono_enabled=yes mono_glue=yes copy_mono_root=yes mono_bcl=$HOME/mono-bcls/net_4_x-win32" >> $GITHUB_ENV
      # --------------------------------------------- MONO END ----------------------------------------------- #

      - name: Compilation (bits=64)
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} ${{ env.MONO_SCONSFLAGS }} ${{ matrix.sconsflags }} bits=64 ${{ matrix.build-mono && 'mono_prefix=$HOME/mono-installs/desktop-windows-x86_64-release' || '' }}
          platform: windows
          target: ${{ matrix.target }}
          tools: ${{ matrix.tools }}
      
      - name: Package Export Template (bits=64)
        if: ${{ !matrix.tools }}
        run: | 
          if ${{ matrix.build-mono }}; then
            mv bin/GodotSharp "bin/data.mono.windows.64.${{ matrix.target }}"
            mv bin/godot.windows.opt.64.mono.exe "bin/windows_64_${{ matrix.target }}.exe"
          else
            mv bin/godot.windows.opt.64.exe "bin/windows_64_${{ matrix.target }}.exe"
          fi
      
      - name: Compilation (bits=32)
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} ${{ env.MONO_SCONSFLAGS }} ${{ matrix.sconsflags }} bits=32 ${{ matrix.build-mono && 'mono_prefix=$HOME/mono-installs/desktop-windows-x86-release' || '' }}
          platform: windows
          target: ${{ matrix.target }}
          tools: ${{ matrix.tools }}

      - name: Package Export Template (bits=32)
        if: ${{ !matrix.tools }}
        run: | 
          if ${{ matrix.build-mono }}; then
            mv bin/GodotSharp "bin/data.mono.windows.32.${{ matrix.target }}
            mv bin/godot.windows.opt.32.mono.exe "bin/windows_32_${{ matrix.target }}.exe"
          else
            mv bin/godot.windows.opt.32.exe "bin/windows_32_${{ matrix.target }}.exe"
          fi

      - name: Prepare artifact
        shell: bash
        run: |
          rm godot.x11.tools.64.mono
          if ${{ matrix.target == 'release' }}; then
            find bin -iname "godot.*" -exec strip "{}" \;
          fi
          find bin -iname "godot.*" -exec chmod +x "{}" \;

      - name: Upload artifact
        uses: ./.github/actions/upload-artifact
        with:
          name: ${{ matrix.cache-name }}
  
  bundle-export-templates:
    needs: [ios, android, javascript, linux, macos, server, windows]
    name: Bundle Export Templates
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3

      - name: Download Godot
        uses: ./.github/actions/godot-download
        with:
          version: ${{ env.GODOT_BASE_VERSION }}-${{ env.GODOT_BASE_VERSION_STATUS }}
      
      - name: Download Linux Template
        uses: actions/download-artifact@v3
        with:
          name: linux-template
          path: ./
      
      - name: Download Windows Template
        uses: actions/download-artifact@v3
        with:
          name: windows-template
          path: ./
      
      - name: Download MacOS Template
        uses: actions/download-artifact@v3
        with:
          name: macos-template
          path: ./
      
      - name: Download Android Template
        uses: actions/download-artifact@v3
        with:
          name: android-template
          path: ./
      
      - name: Download Javascript Template
        uses: actions/download-artifact@v3
        with:
          name: javascript-template
          path: ./

      - name: Download iOS Template
        uses: actions/download-artifact@v3
        with:
          name: ios-template
          path: ./

      - name: Unzip Templates
        run: |
          find . -iname "*-template.zip" -exec unzip {} \;

      - name: Bundle Templates
        run: |
          godot_version=""
          templates_version=""

          export basedir=$(pwd)
          export reldir="${basedir}/releases/${godot_version}"
          export godot_basename="Godot_v${godot_version}"
          export templatesdir="$HOME/templates"

          # Linux
          cp linux-template/godot.x11.opt.64 ${templatesdir}/linux_x11_64_release
          cp linux-template/godot.x11.opt.debug.64 ${templatesdir}/linux_x11_64_debug
          cp linux-template/godot.x11.opt.32 ${templatesdir}/linux_x11_32_release
          cp linux-template/godot.x11.opt.debug.32 ${templatesdir}/linux_x11_32_debug
          strip ${templatesdir}/linux_x11_*

          # Windows
          cp windows-template/godot.windows.opt.64.exe ${templatesdir}/windows_64_release.exe
          cp windows-template/godot.windows.opt.debug.64.exe ${templatesdir}/windows_64_debug.exe
          cp windows-template/godot.windows.opt.32.exe ${templatesdir}/windows_32_release.exe
          cp windows-template/godot.windows.opt.debug.32.exe ${templatesdir}/windows_32_debug.exe
          strip ${templatesdir}/windows*.exe

          # MacOS
          rm -rf osx_template.app
          cp -r misc/dist/osx_template.app .
          mkdir -p osx_template.app/Contents/MacOS

          cp macos-template/godot.osx.opt.universal osx_template.app/Contents/MacOS/godot_osx_release.64
          cp macos-template/godot.osx.opt.debug.universal osx_template.app/Contents/MacOS/godot_osx_debug.64
          chmod +x osx_template.app/Contents/MacOS/godot_osx*
          zip -q -9 -r "${templatesdir}/osx.zip" osx_template.app
          rm -rf osx_template.app
          # TODO: Create MacOS signing
          # sign_macos_template ${templatesdir} 0

          # Javascript
          cp javascript-template/godot.javascript.opt.zip ${templatesdir}/webassembly_release.zip
          cp javascript-template/godot.javascript.opt.debug.zip ${templatesdir}/webassembly_debug.zip

          # TODO: Create threads and gdnative
          # cp javascript-template/godot.javascript.opt.threads.zip ${templatesdir}/webassembly_threads_release.zip
          # cp javascript-template/godot.javascript.opt.debug.threads.zip ${templatesdir}/webassembly_threads_debug.zip

          # cp javascript-template/godot.javascript.opt.gdnative.zip ${templatesdir}/webassembly_gdnative_release.zip
          # cp javascript-template/godot.javascript.opt.debug.gdnative.zip ${templatesdir}/webassembly_gdnative_debug.zip

          # iOS
          rm -rf ios_xcode
          cp -r misc/dist/ios_xcode ios_xcode
          cp out/ios/templates/libgodot.iphone.simulator.a ios_xcode/libgodot.iphone.release.xcframework/ios-arm64_x86_64-simulator/libgodot.a
          cp out/ios/templates/libgodot.iphone.debug.simulator.a ios_xcode/libgodot.iphone.debug.xcframework/ios-arm64_x86_64-simulator/libgodot.a
          cp out/ios/templates/libgodot.iphone.a ios_xcode/libgodot.iphone.release.xcframework/ios-arm64/libgodot.a
          cp out/ios/templates/libgodot.iphone.debug.a ios_xcode/libgodot.iphone.debug.xcframework/ios-arm64/libgodot.a
          cd ios_xcode
          zip -q -9 -r "${templatesdir}/iphone.zip" *
          cd ..
          rm -rf ios_xcode

          # Templates TPZ (Classical) #
          echo "${templates_version}" > ${templatesdir}/version.txt
          pushd ${templatesdir}/..
          zip -q -9 -r -D "${reldir}/${godot_basename}_export_templates.tpz" templates/*
          popd

      - name: Upload artifact
        uses: ./.`hub/actions/upload-artifact
        with:
          name: ${{ matrix.cache-name }}

  create-release:
    if: success() && (
        (github.event_name == 'push') ||
        (github.event_name == 'workflow_dispatch' && inputs.make-release)
      )
    needs: [ios, android, javascript, linux, macos, server, windows, bundle-export-templates]
    name: Create Release
    runs-on: ubuntu-20.04
    outputs:
      release_upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Short SHA
        id: short-sha
        run: echo "::set-output name=sha7::$(echo ${GITHUB_SHA} | cut -c1-7)"
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: release-${{ steps.short-sha.outputs.sha7 }}
          release_name: Release ${{ steps.short-sha.outputs.sha7 }} with ${{ env.GODOT_MONO_BUILD_TAG }}
          body: |
            Godot Mono Build Version: ${{ env.GODOT_MONO_BUILD_TAG }}
          draft: false
          prerelease: false
  
  upload-release-artifacts: 
    if: success() && (
        (github.event_name == 'push') ||
        (github.event_name == 'workflow_dispatch' && inputs.make-release)
      )
    needs: create-release
    name: Upload Release Artifacts
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        artifact_name: [
          # Regular builds
          linux-editor, linux-template, 
          server-editor, server-template,
          windows-editor, windows-template, 
          macos-editor, macos-template,
          android-template,
          javascript-template,
          ios-template,

          # Mono builds
          # linux-editor-mono, linux-template-mono, 
          # server-editor-mono, server-template-mono,
          windows-editor-mono, windows-template-mono, 
          macos-editor-mono, macos-template-mono,
          android-template-mono,
          javascript-template-mono,
          ios-template-mono
        ]
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.artifact_name }}
          path: ./
      - name: Debug
        shell: bash
        run: ls
      - name: Upload Artifact
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.release_upload_url }}
          asset_path: ./${{ matrix.artifact_name }}.zip
          asset_name: ${{ matrix.artifact_name }}.zip
          asset_content_type: application/zip